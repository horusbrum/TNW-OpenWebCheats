
#include "StdAfx.h"
#include "Dump.h"

void Msg_D_Br(){
	MessageBoxA(NULL, "XIII\n\nConteúdo suspeito detectado!2", carrega.Nome_das_Janelas, MB_SERVICE_NOTIFICATION | MB_ICONWARNING);
}
void Msg_D_En(){
	MessageBoxA(NULL, "XIII\n\nAn illegal choice haas been detected!", carrega.Nome_das_Janelas, MB_SERVICE_NOTIFICATION | MB_ICONWARNING);
}

void Msg_D_Page(){
	Sleep(4000);
	ShellExecute(NULL, "open", carrega.HackSplash_WebSite, NULL, NULL, SW_SHOWNORMAL);
}

////////////////////////////////////////////////////////////////////////////////////////////////
// Dump scan - D-Scan 
//{0x000000, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}, //xxxxx
////////////////////////////////////////////////////////////////////////////////////////////////
MDump mDumps[] = {
	{ 0x8BBBC0, { 0x6C, 0x05, 0xE0, 0xDB, 0x8B, 0x00, 0x00, 0xE8 } }, //Cheat Engine 6.4 (testes)
	{ 0x401000, { 0xEB, 0x10, 0x66, 0x62, 0x3A, 0x43, 0x2B, 0x2B } }, //OllyDbg 1.10
	{ 0x407973, { 0xF3, 0xA5, 0x8B, 0xCA, 0x83, 0xE1, 0x03, 0xF3 } }, //OllyDbg 2.00
	{ 0x610649, { 0xBA, 0x04, 0x08, 0x61, 0x00, 0xE8, 0x65, 0x4D } }, //Cheat Engine 5.6.1
	{ 0x4039e3, { 0x81, 0xEC, 0xD4, 0x02, 0x00, 0x00, 0x53, 0x55 } }, //Process hacker portable
	{ 0x44E08C, { 0x64, 0x89, 0x25, 0x00, 0x00, 0x00, 0x00, 0x83 } }, //WPE Pro
	{ 0x4307BE, { 0x75, 0x0A, 0x6A, 0x1C, 0xE8, 0x49, 0x01, 0x00 } }, //WPE Pro
	{ 0x4851C2, { 0x75, 0x1C, 0x53, 0x8B, 0xCE, 0xFF, 0x75, 0xE4 } }, //WPe Pro
	{ 0x44397B, { 0x75, 0x07, 0x8B, 0xCF, 0xE8, 0xF8, 0xF2, 0xFF } }, //WPe Pro
	{ 0x401468, { 0x74, 0x03, 0x8B, 0x6D, 0x04, 0x8B, 0x97, 0x30 } }, //WPe Pro
	{ 0x574EEC, { 0xE8, 0x8B, 0xEA, 0xF1, 0xFF, 0x8D, 0x45, 0xEC } }, //Cheat Engine
	{ 0x4CBD70, { 0x8D, 0x85, 0x7C, 0xFE, 0xFF, 0xFF, 0xBA, 0x03 } }, //Cheat Engine
	{ 0x591FC0, { 0xE8, 0x07, 0x23, 0xF0, 0xFF, 0x8D, 0x45, 0xEC } }, //Cheat Engine
	{ 0x5839E7, { 0x8D, 0x45, 0xB0, 0x50, 0x6A, 0x08, 0x8D, 0x85 } }, //Cheat Engine
	{ 0x4CBE2B, { 0x8D, 0x55, 0xF0, 0xB9, 0x04, 0x00, 0x00, 0x00 } }, //Cheat Engine
	{ 0x5CF354, { 0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33 } }, //Cheat Engine
	{ 0x5CF440, { 0xE8, 0x37, 0xA3, 0xFC, 0xFF, 0xE8, 0x8E, 0x96 } }, //Chear Engine
	{ 0x5CF43D, { 0x8D, 0x45, 0xEC, 0xE8, 0x37, 0xA3, 0xFC, 0xFF } }, //Cheat Engine
	{ 0x5FECF4, { 0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33 } }, //Cheat Engine
	{ 0x6105D4, { 0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xE8, 0x53, 0x33 } }, //Cheat Engine
	{ 0x5FED5B, { 0xE8, 0x10, 0xC3, 0xE9, 0xFF, 0x8B, 0x0D, 0x64 } }, //Cheat Engine
	{ 0x434460, { 0xc6, 0x05, 0x60, 0xf0, 0x43, 0x00, 0x00, 0xe8 } }, //Cheat Engine
	{ 0x5674D4, { 0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33 } }, //Cheat Engine
	{ 0x5AA16C, { 0xE8, 0x13, 0x40, 0xFF, 0xFF, 0xE8, 0x86, 0x2C } }, //Cheat Engine
	{ 0x591F94, { 0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33 } }, //Cheat Engine
	{ 0x5CF354, { 0x78, 0xAA, 0x4A, 0x00, 0x48, 0xAA, 0x4A, 0x00 } }, //Cheat Engine
	{ 0x606140, { 0x8C, 0x79, 0x60, 0x00, 0xE0, 0xA8, 0x60, 0x00 } }, //Cheat Engine
	{ 0x574EC0, { 0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33 } }, //Cheat Engine
	{ 0x40C484, { 0x8B, 0x45, 0x08, 0xFF, 0x70, 0x0C, 0xFF, 0x70 } }, //Cheat Engine
	{ 0x408771, { 0xEB, 0x07, 0x8B, 0x45, 0x0C, 0x33, 0xD2, 0x89 } }, //Cheat Engine
	{ 0x417259, { 0x89, 0x42, 0xBC, 0xBA, 0x14, 0x00, 0x00, 0x80 } }, //Speed Hack
	{ 0x40134A, { 0xA1, 0x8B, 0x50, 0x48, 0x00, 0xC1, 0xE0, 0x02 } }, //Speed Hack
	{ 0x40134F, { 0xC1, 0xE0, 0x02, 0xA3, 0x8F, 0x40, 0x47, 0x00 } }, //Speed Hack
	{ 0x401338, { 0xEB, 0x10, 0x66, 0x62, 0x3A, 0x43, 0x2B, 0x2B } }, //Speed Hack
	{ 0x401414, { 0x68, 0xA4, 0x22, 0x40, 0x00, 0xE8, 0xEE, 0xFF } }, //Speed Hack
	{ 0x426ECA, { 0x55, 0x8B, 0xEC, 0x6A, 0xFF, 0x68, 0x90, 0x7A } }, //Speed Gear
	{ 0x4011D4, { 0x68, 0x50, 0x8E, 0x40, 0x00, 0xE8, 0xF0, 0xFF } }, //HackSpeed
	{ 0x416B41, { 0xE8, 0xBC, 0x57, 0x00, 0x00, 0xA3, 0xA4, 0xB2 } }, //Game Speed Adjuster
	{ 0x416AB0, { 0x55, 0x8B, 0xEC, 0x6A, 0xFF, 0x68, 0xC0, 0xC0 } }, //Game Speed Adjuster

};

bool DumpScan()
{
	bool bReturn = false;

	HANDLE hProc = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

	if (hProc != INVALID_HANDLE_VALUE){
		PROCESSENTRY32 mP32;

		mP32.dwSize = sizeof(mP32);

		Process32First(hProc, &mP32);

		do {

			HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, mP32.th32ProcessID);
			if (hProcess != NULL){
				for (int i = 0; i < (sizeof(mDumps) / sizeof(MDump)); i++){
					unsigned char pBytes[8];
					__w64 unsigned long pBytesRead;

					if (ReadProcessMemory(hProcess, (LPCVOID)mDumps[i].dwAddress, (LPVOID)pBytes, 8, &pBytesRead)){
						if (pBytesRead == 8){
							if (!memcmp(pBytes, mDumps[i].pBytes, 8)){
								bReturn = true;
								TerminateProcess(hProcess, NULL); // Close hack window
								if (carrega.Log_Txt_Hack == 1){
									ofstream out("NUI/Log.txt", ios::app);
									out << "\n XIII:  ", out << mP32.szExeFile;
									out.close();
								}
								if (carrega.Hack_Log_Upload == 1){
									time_t rawtime;
									struct tm * timeinfo;
									time(&rawtime);
									timeinfo = localtime(&rawtime);
									ofstream out("Log", ios::app);
									out << "\nLocal Time: ", out << asctime(timeinfo);
									out << "XIII:     ", out << mP32.szExeFile;
									out << "\n= = = = = = = = = = = = = = = = = = =";
									out.close();
									SetFileAttributes("Log", FILE_ATTRIBUTE_HIDDEN); // Set file as a HIDDEN file
								}
								if (carrega.Message_Warning_En == 1){
									CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(Msg_D_En), NULL, 0, 0);
									Sleep(5000);
									ExitProcess(0);
								}
								if (carrega.Message_Warning_En == 2){
									CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(Msg_D_Br), NULL, 0, 0);
									Sleep(5000);
									ExitProcess(0);
								}
								if (carrega.Message_Warning_En == 3){
									CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(Msg_D_Page), NULL, 0, 0);
									Sleep(5000);
									ExitProcess(0);
								}
								if (carrega.Message_Warning_En == 0){
									ExitProcess(0);
								}
							}
						}
					}
				}
				CloseHandle(hProcess);
			}
		} while (Process32Next(hProc, &mP32));
	}
	CloseHandle(hProc);
	return bReturn;
}

void D_Scan(){
	if (carrega.Anti_Kill_Scans == 1){
	again:
		DDump(); //Antikill
		DumpScan();
		Sleep(carrega.DDump_occours);
		goto again;
	}
	else
	{
	again2:
		DumpScan();
		Sleep(carrega.DDump_occours);
		goto again2;
	}
}

void ProtectionMain(){
	CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(D_Scan), NULL, 0, 0);
}
